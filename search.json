[{"path":"https://ncn-foreigners.github.io/nonprobsvy/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 ncn-foreigners Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Łukasz Chrostowski. Author, contributor. Maciej Beręsewicz. Author, maintainer. Piotr Chlebicki. Author, contributor.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chrostowski Ł, Beręsewicz M, Chlebicki P (2025). Inference Based Non-Probability Samples. R package version 0.2.2, https://github.com/ncn-foreigners/nonprobsvy. Chrostowski, Ł., Chlebicki, P., & Beręsewicz, M. (2025). nonprobsvy -- R package modern methods non-probability surveys. arXiv preprint arXiv:2504.04255","code":"@Manual{nonprobsy,   title = {Inference Based on Non-Probability Samples},   author = {Łukasz Chrostowski and Maciej Beręsewicz and Piotr Chlebicki},   note = {R package version 0.2.2},   year = {2025},   url = {https://github.com/ncn-foreigners/nonprobsvy}, } @Misc{,   year = {2025},   author = {Łukasz Chrostowski and Piotr Chlebicki and Maciej Beręsewicz},   title = {nonprobsvy -- An R package for modern methods for non-probability surveys},   eprint = {2504.04255},   archiveprefix = {arXiv},   primaryclass = {stat.ME},   note = {R package version 0.2.2},   url = {https://arxiv.org/abs/2504.04255}, }"},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"basic-information","dir":"","previous_headings":"","what":"Basic information","title":"Inference Based on Non-Probability Samples","text":"goal package provide R users access modern methods non-probability samples auxiliary information population probability sample available: inverse probability weighting estimators possible calibration constraints (Y. Chen, Li, Wu 2020), mass imputation estimators based nearest neighbours (Yang, Kim, Hwang 2021), predictive mean matching (Chlebicki, Chrostowski, Beręsewicz 2025), non-parametric (S. Chen, Yang, Kim 2022) regression imputation (Kim et al. 2021), doubly robust estimators (Y. Chen, Li, Wu 2020) bias minimization (Yang, Kim, Song 2020). package allows : variable section high-dimensional space using SCAD (Yang, Kim, Song 2020), Lasso MCP penalty (via ncvreg, Rcpp, RcppArmadillo packages), estimation variance using analytical bootstrap approach (see Wu (2023)), integration survey srvyr packages probability sample available (Lumley 2004, 2023; Freedman Ellis Schneider 2024), different links selection (logit, probit cloglog) outcome (gaussian, binomial poisson) variables. Details use package can found: see working paper Chrostowski, Ł., Chlebicki, P., & Beręsewicz, M. (2025). nonprobsvy–R package modern methods non-probability surveys. arXiv preprint arXiv:2504.04255. draft (proofread) version book Modern inference methods non-probability samples R, example codes reproduce papers available github repository software tutorials.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Inference Based on Non-Probability Samples","text":"can install recent version nonprobsvy package main branch Github : install stable version CRAN development version dev branch","code":"remotes::install_github(\"ncn-foreigners/nonprobsvy\") install.packages(\"nonprobsvy\") remotes::install_github(\"ncn-foreigners/nonprobsvy@dev\")"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"basic-idea","dir":"","previous_headings":"","what":"Basic idea","title":"Inference Based on Non-Probability Samples","text":"Consider following setting two samples available: non-probability (denoted S_A) probability (denoted S_B) set auxiliary variables (denoted \\boldsymbol{X}) available sources Y \\boldsymbol{d} (\\boldsymbol{w}) present probability sample.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"basic-functionalities","dir":"","previous_headings":"","what":"Basic functionalities","title":"Inference Based on Non-Probability Samples","text":"Suppose Y target variable, \\boldsymbol{X} matrix auxiliary variables, R inclusion indicator. , interested estimating mean \\bar{\\tau}_Y sum \\tau_Y target variable given observed data set (y_k, \\boldsymbol{x}_k, R_k), can approach problem possible scenarios: unit-level data available non-probability sample S_{}, .e. (y_k,\\boldsymbol{x}_k) available units k \\S_{}, population-level data available \\boldsymbol{x}_1,\\ldots,\\boldsymbol{x}_p, denoted \\tau_{x_{1}},\\tau_{x_{2}},\\ldots,\\tau_{x_{p}} population size N known. can also consider situations population data estimated (e.g. basis survey access), unit-level data available non-probability sample S_A probability sample S_B, .e. (y_k,\\boldsymbol{x}_k,R_k) determined data. determined data: R_k=1 k \\S_A otherwise R_k=0, y_k observed sample S_A \\boldsymbol{x}_k observed S_A S_B,","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"when-unit-level-data-is-available-for-non-probability-survey-only","dir":"","previous_headings":"Basic functionalities","what":"When unit-level data is available for non-probability survey only","title":"Inference Based on Non-Probability Samples","text":"","code":"nonprob(   outcome = y ~ x1 + x2 + ... + xk,   data = nonprob,   pop_totals = c(`(Intercept)`= N,                  x1 = tau_x1,                  x2 = tau_x2,                  ...,                  xk = tau_xk),   method_outcome = \"glm\",   family_outcome = \"gaussian\" ) nonprob(   selection =  ~ x1 + x2 + ... + xk,    target = ~ y,    data = nonprob,    pop_totals = c(`(Intercept)` = N,                   x1 = tau_x1,                   x2 = tau_x2,                   ...,                   xk = tau_xk),    method_selection = \"logit\" ) nonprob(   selection =  ~ x1 + x2 + ... + xk,    target = ~ y,    data = nonprob,    pop_totals = c(`(Intercept)`= N,                   x1 = tau_x1,                   x2 = tau_x2,                   ...,                   xk = tau_xk),    method_selection = \"logit\",    control_selection = control_sel(est_method = \"gee\", gee_h_fun = 1) ) nonprob(   selection = ~ x1 + x2 + ... + xk,    outcome = y ~ x1 + x2 + …, + xk,    pop_totals = c(`(Intercept)` = N,                   x1 = tau_x1,                   x2 = tau_x2,                   ...,                   xk = tau_xk),    svydesign = prob,    method_outcome = \"glm\",    family_outcome = \"gaussian\" )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"when-unit-level-data-are-available-for-both-surveys","dir":"","previous_headings":"Basic functionalities","what":"When unit-level data are available for both surveys","title":"Inference Based on Non-Probability Samples","text":"","code":"nonprob(   outcome = y ~ x1 + x2 + ... + xk,    data = nonprob,    svydesign = prob,    method_outcome = \"glm\",    family_outcome = \"gaussian\" ) nonprob(   outcome = y ~ x1 + x2 + ... + xk,    data = nonprob,    svydesign = prob,    method_outcome = \"nn\",    family_outcome = \"gaussian\",    control_outcome = control_outcome(k = 2) ) nonprob(   outcome = y ~ x1 + x2 + ... + xk,    data = nonprob,    svydesign = prob,    method_outcome = \"pmm\",    family_outcome = \"gaussian\" ) nonprob(   outcome = y ~ x1 + x2 + ... + xk,    data = nonprob,    svydesign = prob,    method_outcome = \"pmm\",    family_outcome = \"gaussian\",    control_outcome = control_out(penalty = \"lasso\"),    control_inference = control_inf(vars_selection = TRUE) ) nonprob(   selection =  ~ x1 + x2 + ... + xk,    target = ~ y,    data = nonprob,    svydesign = prob,    method_selection = \"logit\" ) nonprob(   selection =  ~ x1 + x2 + ... + xk,    target = ~ y,    data = nonprob,    svydesign = prob,    method_selection = \"logit\",    control_selection = control_sel(est_method = \"gee\", gee_h_fun = 1) ) nonprob(   selection =  ~ x1 + x2 + ... + xk,    target = ~ y,    data = nonprob,    svydesign = prob,    method_outcome = \"pmm\",    family_outcome = \"gaussian\",    control_inference = control_inf(vars_selection = TRUE) ) nonprob(   selection = ~ x1 + x2 + ... + xk,    outcome = y ~ x1 + x2 + ... + xk,    data = nonprob,    svydesign = prob,    method_outcome = \"glm\",    family_outcome = \"gaussian\" ) nonprob(   selection = ~ x1 + x2 + ... + xk,    outcome = y ~ x1 + x2 + ... + xk,    data = nonprob,    svydesign = prob,   method_outcome = \"glm\",    family_outcome = \"gaussian\",    control_inference = control_inf(     vars_selection = TRUE,      bias_correction = TRUE   ) )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Inference Based on Non-Probability Samples","text":"Simulate example data following paper: Kim, Jae Kwang, Zhonglei Wang. “Sampling techniques big data analysis.” International Statistical Review 87 (2019): S177-S191 [section 5.2] Declare svydesign object survey package srvyr package Estimate population mean y1 based doubly robust estimator using IPW calibration constraints specify auxiliary variables combined inference. Results Mass imputation estimator Results Inverse probability weighting estimator Results","code":"library(survey) library(nonprobsvy)  set.seed(1234567890) N <- 1e6 ## 1000000 n <- 1000 x1 <- rnorm(n = N, mean = 1, sd = 1) x2 <- rexp(n = N, rate = 1) epsilon <- rnorm(n = N) # rnorm(N) y1 <- 1 + x1 + x2 + epsilon y2 <- 0.5*(x1 - 0.5)^2 + x2 + epsilon p1 <- exp(x2)/(1+exp(x2)) p2 <- exp(-0.5+0.5*(x2-2)^2)/(1+exp(-0.5+0.5*(x2-2)^2)) flag_bd1 <- rbinom(n = N, size = 1, prob = p1) flag_srs <- as.numeric(1:N %in% sample(1:N, size = n)) base_w_srs <- N/n population <- data.frame(x1,x2,y1,y2,p1,p2,base_w_srs, flag_bd1, flag_srs, pop_size = N) base_w_bd <- N/sum(population$flag_bd1) sample_prob <- svydesign(ids= ~1, weights = ~ base_w_srs,                           data = subset(population, flag_srs == 1),                          fpc = ~ pop_size)  sample_prob #> Independent Sampling design #> svydesign(ids = ~1, weights = ~base_w_srs, data = subset(population,  #>     flag_srs == 1), fpc = ~pop_size) sample_prob <- srvyr::as_survey_design(.data = subset(population, flag_srs == 1),                                        weights = base_w_srs)  sample_prob Independent Sampling design (with replacement) Called via srvyr Sampling variables: Data variables:    - x1 (dbl), x2 (dbl), y1 (dbl), y2 (dbl), p1 (dbl), p2 (dbl), base_w_srs (dbl), flag_bd1 (int), flag_srs (dbl) result_dr <- nonprob(   selection = ~ x2,   outcome = y1 + y2 ~ x1 + x2,   data = subset(population, flag_bd1 == 1),   svydesign = sample_prob ) result_dr #> A nonprob object #>  - estimator type: doubly robust #>  - method: glm (gaussian) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y1: 3.1817 #>    - variable y2: 1.8087 #>  - selected estimators: #>    - variable y1: 2.9500 (se=0.0414, ci=(2.8689, 3.0312)) #>    - variable y2: 1.5762 (se=0.0498, ci=(1.4786, 1.6739)) result_mi <- nonprob(   outcome = y1 + y2 ~ x1 + x2,   data = subset(population, flag_bd1 == 1),   svydesign = sample_prob ) result_mi #> A nonprob object #>  - estimator type: mass imputation #>  - method: glm (gaussian) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y1: 3.1817 #>    - variable y2: 1.8087 #>  - selected estimators: #>    - variable y1: 2.9498 (se=0.0420, ci=(2.8675, 3.0321)) #>    - variable y2: 1.5760 (se=0.0326, ci=(1.5122, 1.6398)) result_ipw <- nonprob(   selection = ~ x2,   target = ~y1+y2,   data = subset(population, flag_bd1 == 1),   svydesign = sample_prob) result_ipw #> A nonprob object #>  - estimator type: inverse probability weighting #>  - method: logit (mle) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y1: 3.1817 #>    - variable y2: 1.8087 #>  - selected estimators: #>    - variable y1: 2.9981 (se=0.0137, ci=(2.9713, 3.0249)) #>    - variable y2: 1.5906 (se=0.0137, ci=(1.5639, 1.6174))"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/index.html","id":"funding","dir":"","previous_headings":"","what":"Funding","title":"Inference Based on Non-Probability Samples","text":"Work package supported National Science Centre, OPUS 20 grant . 2020/39/B/HS4/00941.","code":""},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/admin.html","id":null,"dir":"Reference","previous_headings":"","what":"Admin data (non-probability survey) — admin","title":"Admin data (non-probability survey) — admin","text":"subset Central Job Offers Database, voluntary administrative data set (non-probability sample). data slightly manipulated ensure relationships preserved, aligned. information CBOP, please refer : https://oferty.praca.gov.pl/portal.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/admin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Admin data (non-probability survey) — admin","text":"","code":"admin"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/admin.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Admin data (non-probability survey) — admin","text":"single data.frame 9,344 rows 6 columns id Identifier entity (company: legal local). private Whether company private (1) public (0) entity. size size entity: S – small (9 employees), M – medium (10-49) L – large (49). nace main NACE code given entity: C, D.E, F, G, H, , J, K.L, M, N, O, P, Q R.S (14 levels, 3 combined: D E, K L, R S). region region Poland (16 levels: 02, 04, ..., 32). single_shift Whether entity seeks employees single shift.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/admin.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Admin data (non-probability survey) — admin","text":"","code":"data(\"admin\") head(admin) #>    id private size nace region single_shift #> 1 j_1       0    L    P     30        FALSE #> 2 j_2       0    L    O     14         TRUE #> 3 j_3       0    L    O     04         TRUE #> 4 j_4       0    L    O     24         TRUE #> 5 j_5       0    L    O     04         TRUE #> 6 j_6       1    L    C     28        FALSE"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/check_balance.html","id":null,"dir":"Reference","previous_headings":"","what":"Checks the variable balance between the probability and non-probability samples — check_balance","title":"Checks the variable balance between the probability and non-probability samples — check_balance","text":"Function compares totals auxiliary variables specified x argument object contains either IPW DR estimator.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/check_balance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checks the variable balance between the probability and non-probability samples — check_balance","text":"","code":"check_balance(x, object, dig)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/check_balance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checks the variable balance between the probability and non-probability samples — check_balance","text":"x formula specifying variables check object object nonprob class dig number digits rounding (default = 2)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/check_balance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checks the variable balance between the probability and non-probability samples — check_balance","text":"list containing totals non-probability probability samples differences","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/check_balance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checks the variable balance between the probability and non-probability samples — check_balance","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\" )  ipw_est2 <- nonprob( selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\", control_selection = control_sel(est_method = \"gee\", gee_h_fun = 1))  ## check the balance for the standard IPW check_balance(~size+private, ipw_est1) #> $nonprob_totals #> (Intercept)       sizeM       sizeS     private  #>    52898.13    13529.55    31175.21    48214.41  #>  #> $prob_totals #> (Intercept)       sizeM       sizeS     private  #>       51870       13758       29551       47321  #>  #> $balance #> (Intercept)       sizeM       sizeS     private  #>     1028.13     -228.45     1624.21      893.41  #>   ## check the balance for the calibrated IPW check_balance(~size+private, ipw_est2) #> $nonprob_totals #> (Intercept)       sizeM       sizeS     private  #>       51870       13758       29551       47321  #>  #> $prob_totals #> (Intercept)       sizeM       sizeS     private  #>       51870       13758       29551       47321  #>  #> $balance #> (Intercept)       sizeM       sizeS     private  #>           0           0           0           0  #>   ## check balance for a more complicated example check_balance(~ I(size==\"M\") + I(nace == \"C\"), ipw_est1) #> $nonprob_totals #>        (Intercept) I(size == \"M\")TRUE I(nace == \"C\")TRUE  #>          52898.131          13529.550           9113.914  #>  #> $prob_totals #>        (Intercept) I(size == \"M\")TRUE I(nace == \"C\")TRUE  #>              51870              13758               9405  #>  #> $balance #>        (Intercept) I(size == \"M\")TRUE I(nace == \"C\")TRUE  #>            1028.13            -228.45            -291.09  #>"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/coef.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns coefficients of the underlying models — coef.nonprob","title":"Returns coefficients of the underlying models — coef.nonprob","text":"Returns list coefficients selection outcome models","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/coef.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns coefficients of the underlying models — coef.nonprob","text":"","code":"# S3 method for class 'nonprob' coef(object, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/coef.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns coefficients of the underlying models — coef.nonprob","text":"object nonprob class object ... arguments passed methods (currently supported)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/coef.nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns coefficients of the underlying models — coef.nonprob","text":"list two entries: \"coef_sel\" matrix coefficients selection equation possible, else NULL \"coef_dr\" matrix coefficients outcome equation(s) possible, else NULL","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/coef.nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns coefficients of the underlying models — coef.nonprob","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\", se = FALSE )  coef(ipw_est1) #> $coef_sel #>                    [,1] #> (Intercept) -0.65277121 #> region04     0.83779549 #> region06     0.19953188 #> region08     0.10479761 #> region10    -0.15756693 #> region12    -0.60987005 #> region14    -0.84150300 #> region16     0.76385615 #> region18     1.17810496 #> region20     0.22251032 #> region22    -0.03753066 #> region24    -0.40670702 #> region26     0.20287478 #> region28     0.57862243 #> region30    -0.61021662 #> region32     0.32742204 #> private      0.05899377 #> naceD.E      0.77273741 #> naceF       -0.37783229 #> naceG       -0.33370352 #> naceH       -0.65174566 #> naceI        0.41179116 #> naceJ       -1.42636886 #> naceK.L      0.06171389 #> naceM       -0.40677813 #> naceN        0.80034162 #> naceO       -0.69354695 #> naceP        1.25095429 #> naceQ        0.30286775 #> naceR.S      0.22227967 #> sizeM       -0.36412124 #> sizeS       -1.02915884 #>  #> $coef_out #> NULL #>"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/confint.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns confidence intervals for estimated mean — confint.nonprob","title":"Returns confidence intervals for estimated mean — confint.nonprob","text":"generic function returns confidence interval estimated mean. standard errors estimated, function updates nonprob object obtain standard errors.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/confint.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns confidence intervals for estimated mean — confint.nonprob","text":"","code":"# S3 method for class 'nonprob' confint(object, parm, level = 0.95, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/confint.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns confidence intervals for estimated mean — confint.nonprob","text":"object object nonprob class. parm names parameters confidence intervals computed, missing parameters considered. level confidence level intervals. ... additional arguments","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/confint.nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns confidence intervals for estimated mean — confint.nonprob","text":"returns data.frame confidence intervals target variables","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/confint.nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns confidence intervals for estimated mean — confint.nonprob","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\", se = FALSE )  confint(ipw_est1) #> Calculating standard errors... #> Error in eval(call, parent.frame()): object 'jvs_svy' not found"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_inf.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for inference — control_inf","title":"Control parameters for inference — control_inf","text":"control_inf constructs list necessary control parameters statistical inference.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_inf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for inference — control_inf","text":"","code":"control_inf(   var_method = c(\"analytic\", \"bootstrap\"),   rep_type = c(\"subbootstrap\", \"auto\", \"JK1\", \"JKn\", \"BRR\", \"bootstrap\", \"mrbbootstrap\",     \"Fay\"),   vars_selection = FALSE,   vars_combine = FALSE,   bias_correction = FALSE,   num_boot = 500,   alpha = 0.05,   cores = 1,   keep_boot = TRUE,   nn_exact_se = FALSE )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_inf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for inference — control_inf","text":"var_method variance method (default \"analytic\"). rep_type replication type weights bootstrap method variance estimation passed survey::.svrepdesign(). Default \"subbootstrap\". vars_selection default FALSE; TRUE, variables selection model used. vars_combine whether variables combined variable selection doubly robust estimators (default FALSE) bias_correction default FALSE; TRUE, bias minimization estimation used model fitting. num_boot number iteration bootstrap algorithms. alpha significance level (default 0.05). cores number cores parallel computing (default 1). keep_boot logical value indicating whether statistics bootstrap kept (default TRUE) nn_exact_se logical value indicating whether compute exact standard error estimate nn pmm estimator. variance estimator estimation based nn pmm can decomposed three parts, third computed using covariance imputed values units probability sample using predictive matches non-probability sample. situations term negligible computationally expensive default set FALSE, recommended option set value TRUE submitting final results.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_inf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for inference — control_inf","text":"list selected parameters.","code":""},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_out.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for outcome model — control_out","title":"Control parameters for outcome model — control_out","text":"control_out constructs list necessary control parameters outcome model.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_out.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for outcome model — control_out","text":"","code":"control_out(   epsilon = 1e-08,   maxit = 100,   trace = FALSE,   k = 5,   penalty = c(\"SCAD\", \"lasso\", \"MCP\"),   a_SCAD = 3.7,   a_MCP = 3,   lambda_min = 0.001,   nlambda = 100,   nfolds = 10,   treetype = c(\"kd\", \"rp\", \"ball\"),   searchtype = c(\"standard\", \"priority\"),   pmm_match_type = 1,   pmm_weights = c(\"none\", \"dist\"),   pmm_k_choice = c(\"none\", \"min_var\"),   pmm_reg_engine = c(\"glm\", \"loess\"),   npar_loess = stats::loess.control(surface = \"direct\", trace.hat = \"approximate\") )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_out.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for outcome model — control_out","text":"epsilon Tolerance fitting algorithms. Default 1e-6. maxit Maximum number iterations. trace logical value. TRUE trace steps fitting algorithms. Default FALSE. k k parameter RANN::nn2() function. Default 5. penalty penalty algorithm variable selection. Default SCAD a_SCAD tuning parameter SCAD penalty outcome model. Default 3.7. a_MCP tuning parameter MCP penalty outcome model. Default 3. lambda_min smallest value lambda, fraction lambda.max. Default .001. nlambda number lambda values. Default 100. nfolds number folds cross-validation variables selection model. treetype Type tree nearest neighbour imputation (NN PMM estimator) passed RANN::nn2() function. searchtype Type search nearest neighbour imputation (NN PMM estimator) passed RANN::nn2() function. pmm_match_type (PMM Estimator) Indicates select 'closest' unit non-probability sample unit probability sample. Either 1 (default) 2 2 matching minimizing distance \\(\\hat{y}_{}\\) \\(\\S_{}\\) \\(y_{j}\\) \\(j \\S_{B}\\) 1 matching minimizing distance \\(\\hat{y}_{}\\) \\(\\S_{}\\) \\(\\hat{y}_{}\\) \\(\\S_{}\\). pmm_weights (PMM Estimator) Indicate weight k nearest neighbours \\(S_{B}\\) create imputed value units \\(S_{}\\). default value \"none\" indicates mean k nearest \\(y\\)'s \\(S_{B}\\) used whereas \"prop_dist\" results weighted mean k values weights inversely proportional distance matched values. pmm_k_choice (PMM Estimator) Character value indicating k hyper-parameter chosen, default \"none\" meaning k provided control_outcome argument used. now option \"min_var\" means k  chosen minimizing estimated variance estimator mean. Parameter k provided control list chosen starting point. pmm_reg_engine (PMM Estimator) whether use parametric (\"glm\") non-parametric (\"loess\") regression model outcome. default \"glm\". npar_loess control parameters stats::loess via stats::loess.control function.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_out.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for outcome model — control_out","text":"List selected parameters.","code":""},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_sel.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for the selection model — control_sel","title":"Control parameters for the selection model — control_sel","text":"control_sel constructs list necessary control parameters selection model.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_sel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for the selection model — control_sel","text":"","code":"control_sel(   est_method = c(\"mle\", \"gee\"),   gee_h_fun = 1,   optimizer = c(\"maxLik\", \"optim\"),   maxlik_method = c(\"NR\", \"BFGS\", \"NM\"),   optim_method = c(\"BFGS\", \"Nelder-Mead\"),   epsilon = 1e-04,   maxit = 500,   trace = FALSE,   penalty = c(\"SCAD\", \"lasso\", \"MCP\"),   a_SCAD = 3.7,   a_MCP = 3,   lambda = -1,   lambda_min = 0.001,   nlambda = 50,   nfolds = 10,   print_level = 0,   start_type = c(\"zero\", \"mle\", \"naive\"),   nleqslv_method = c(\"Broyden\", \"Newton\"),   nleqslv_global = c(\"dbldog\", \"pwldog\", \"cline\", \"qline\", \"gline\", \"hook\", \"none\"),   nleqslv_xscalm = c(\"fixed\", \"auto\"),   dependence = FALSE,   key = NULL )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_sel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for the selection model — control_sel","text":"est_method Method estimation propensity score model (\"mle\" \"gee\"; default \"mle\"). gee_h_fun Smooth function generalized estimating equations (GEE) method. optimizer (est_method=\"mle\" ) optimization function maximum likelihood estimation. maxlik_method (est_method=\"mle\" ) maximisation method passed maxLik::maxLik() function. Default NR. optim_method (est_method=\"mle\" ) maximisation method passed stats::optim() function. Default BFGS. epsilon Tolerance fitting algorithms default 1e-6. maxit Maximum number iterations. trace logical value. TRUE trace steps fitting algorithms. Default FALSE penalty penalization function used variables selection. a_SCAD tuning parameter SCAD penalty selection model. Default 3.7. a_MCP tuning parameter MCP penalty selection model. Default 3. lambda user-specified \\(\\lambda\\) value variable selection model fitting. lambda_min smallest value lambda, fraction lambda.max. Default .001. nlambda number lambda values. Default 50. nfolds number folds cross validation. Default 10. print_level argument determines level printing done optimization (propensity score model) process. start_type Type method start points model fitting taking following values zero start vector zeros (default methods). mle (est_method=\"gee\" ) starting parameters taken result est_method=\"mle\" method. nleqslv_method (est_method=\"gee\" ) method passed nleqslv::nleqslv() function. nleqslv_global (est_method=\"gee\" ) global strategy passed nleqslv::nleqslv() function. nleqslv_xscalm (est_method=\"gee\" ) type x scaling passed nleqslv::nleqslv() function. dependence logical value (default TRUE) informing whether samples overlap (YET IMPLEMENTED, FUTURE DEVELOPMENT). key binary key variable allowing identify overlap (YET IMPLEMENTED, FUTURE DEVELOPMENT).","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_sel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for the selection model — control_sel","text":"List selected parameters.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/control_sel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Control parameters for the selection model — control_sel","text":"Smooth function (gee_h_fun) generalized estimating equations (GEE) method taking following values 1 \\(\\boldsymbol{h}\\left(\\boldsymbol{x}, \\boldsymbol{\\theta}\\right) =   \\frac{\\pi(\\boldsymbol{x}, \\boldsymbol{\\theta})}{\\boldsymbol{x}}\\), 2 \\( \\boldsymbol{h}\\left(\\boldsymbol{x}, \\boldsymbol{\\theta}\\right) = \\boldsymbol{x}\\)","code":""},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/extract.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts estimates from the nonprob class object — extract","title":"Extracts estimates from the nonprob class object — extract","text":"Returns data.frame estimated mean(s) standard error(s)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/extract.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts estimates from the nonprob class object — extract","text":"","code":"extract(object, what)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/extract.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts estimates from the nonprob class object — extract","text":"object object nonprob class extract: estimates (mean(s), SE(s) CI(s); \"\"; default), estimated mean(s) (\"mean\") standard error(s) (\"se\")","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/extract.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts estimates from the nonprob class object — extract","text":"data.frame selected information","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/extract.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts estimates from the nonprob class object — extract","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\" ) extract(ipw_est1) #>         target      mean         SE lower_bound upper_bound #> 1 single_shift 0.7223628 0.04207711   0.6398932   0.8048324 extract(ipw_est1, \"se\") #>         target         SE #> 1 single_shift 0.04207711"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/jvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Job vacancy survey — jvs","title":"Job vacancy survey — jvs","text":"subset Job Vacancy Survey Poland (one quarter). data subject slight manipulation, relationships data preserved. details JVS, please refer following link: https://stat.gov.pl/obszary-tematyczne/rynek-pracy/popyt-na-prace/zeszyt-metodologiczny-popyt-na-prace,3,1.html.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/jvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Job vacancy survey — jvs","text":"","code":"jvs"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/jvs.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Job vacancy survey — jvs","text":"single data.frame 6,523 rows 6 columns id Identifier entity (company: legal local). private Whether company private (1) public (0) entity. size size entity: S – small (9 employees), M – medium (10-49) L – large (49). nace main NACE code given entity: C, D.E, F, G, H, , J, K.L, M, N, O, P, Q R.S (14 levels, 3 combined: D E, K L, R S). region region Poland (16 levels: 02, 04, ..., 32). weight final (calibrated) weight (w-weight). access design weights (d-weights).","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/jvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Job vacancy survey — jvs","text":"","code":"data(\"jvs\") head(jvs) #>    id private size nace region weight #> 1 j_1       0    L    O     14      1 #> 2 j_2       0    L    O     24      6 #> 3 j_3       0    L  R.S     14      1 #> 4 j_4       0    L  R.S     14      1 #> 5 j_5       0    L  R.S     22      1 #> 6 j_6       0    M  R.S     26      1"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":null,"dir":"Reference","previous_headings":"","what":"Mass imputation using the generalized linear model method — method_glm","title":"Mass imputation using the generalized linear model method — method_glm","text":"Model outcome mass imputation estimator using generalized linear models via stats::glm function. Estimation mean done using \\(S_B\\) probability sample known population totals.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mass imputation using the generalized linear model method — method_glm","text":"","code":"method_glm(   y_nons,   X_nons,   X_rand,   svydesign,   weights = NULL,   family_outcome = \"gaussian\",   start_outcome = NULL,   vars_selection = FALSE,   pop_totals = NULL,   pop_size = NULL,   control_outcome = control_out(),   control_inference = control_inf(),   verbose = FALSE,   se = TRUE )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mass imputation using the generalized linear model method — method_glm","text":"y_nons target variable non-probability sample X_nons model.matrix auxiliary variables non-probability sample X_rand model.matrix auxiliary variables non-probability sample svydesign svydesign object weights case / frequency weights non-probability sample family_outcome family glm model start_outcome start parameters (default NULL) vars_selection whether variable selection conducted pop_totals population totals nonprob function pop_size population size nonprob function control_outcome controls passed control_out function control_inference controls passed control_inf function (currently used, development) verbose parameter passed main nonprob function se whether standard errors calculated","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mass imputation using the generalized linear model method — method_glm","text":"nonprob_method class list following entries model_fitted fitted model either glm.fit cv.ncvreg object y_nons_pred predicted values non-probablity sample y_rand_pred predicted values probability sample population totals coefficients coefficients model (available) svydesign updated surveydesign2 object (new column y_hat_MI added) y_mi_hat estimated population mean target variable vars_selection whether variable selection performed var_prob variance probability sample component (available) var_nonprob variance non-probability sampl component var_total total variance, possible var_prob+var_nonprob , just scalar model model type (character \"glm\") family family type (character \"glm\")","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mass imputation using the generalized linear model method — method_glm","text":"Analytical variance variance mean estimated based following approach () non-probability part  (\\(S_A\\) size \\(n_A\\); denoted var_nonprob result) $$ \\hat{V}_1 = \\frac{1}{n_A^2}\\sum_{=1}^{n_A} \\hat{e}_i \\left\\lbrace \\boldsymbol{h}(\\boldsymbol{x}_i; \\hat{\\boldsymbol{\\beta}})^\\prime\\hat{\\boldsymbol{c}}\\right\\rbrace, $$ \\(\\hat{e}_i = y_i - m(\\boldsymbol{x}_i; \\hat{\\boldsymbol{\\beta}})\\) $$\\widehat{\\boldsymbol{c}}=\\left\\lbrace n_B^{-1} \\sum_{\\B} \\dot{\\boldsymbol{m}}\\left(\\boldsymbol{x}_i ; \\boldsymbol{\\beta}^*\\right) \\boldsymbol{h}\\left(\\boldsymbol{x}_i ; \\boldsymbol{\\beta}^*\\right)^{\\prime}\\right\\rbrace^{-1} N^{-1} \\sum_{\\} w_i \\dot{\\boldsymbol{m}}\\left(\\boldsymbol{x}_i ; \\boldsymbol{\\beta}^*\\right).$$ linear regression model \\(\\boldsymbol{h}\\left(\\boldsymbol{x}_i ; \\widehat{\\boldsymbol{\\beta}}\\right)=\\boldsymbol{x}_i\\) \\(\\widehat{\\boldsymbol{c}}=\\left(n_A^{-1} \\sum_{\\} \\boldsymbol{x}_i \\boldsymbol{x}_i^{\\prime}\\right)^{-1} N^{-1} \\sum_{\\B} w_i \\boldsymbol{x}_i .\\) (b) probability part (\\(S_B\\) size \\(n_B\\); denoted var_prob result) part uses functionalities {survey} package variance estimated using following equation: $$ \\hat{V}_2=\\frac{1}{N^2} \\sum_{=1}^{n_B} \\sum_{j=1}^{n_B} \\frac{\\pi_{j}-\\pi_i \\pi_j}{\\pi_{j}} \\frac{m(\\boldsymbol{x}_i; \\hat{\\boldsymbol{\\beta}})}{\\pi_i} \\frac{m(\\boldsymbol{x}_i; \\hat{\\boldsymbol{\\beta}})}{\\pi_j}. $$ Note \\(\\hat{V}_2\\) principle can estimated various ways depending type design whether population size known . Furthermore, population totals/means known assumed fixed set \\(\\hat{V}_2=0\\). Information case svydesign available: variance estimated non-probability part \\(\\hat{V}_1\\) defined . point estimator \\(\\hat{\\mu}_y\\) linear regression estimated using \\(\\mu_x^\\prime\\hat{\\boldsymbol{\\beta}}\\) \\(\\mu_x\\) vector population means non-linear functions logistic Poisson regression use simplification, .e. report point estimate \\(\\exp(\\mu_x^\\prime\\hat{\\boldsymbol{\\beta}})\\) Poisson \\(\\frac{\\exp(\\mu_x^\\prime\\hat{\\boldsymbol{\\beta}})}{1+\\exp(\\mu_x^\\prime\\hat{\\boldsymbol{\\beta}})}\\) logistic regression.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mass imputation using the generalized linear model method — method_glm","text":"Kim, J. K., Park, S., Chen, Y., & Wu, C. (2021). Combining non-probability probability survey samples mass imputation. Journal Royal Statistical Society Series : Statistics Society, 184(3), 941-963.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_glm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mass imputation using the generalized linear model method — method_glm","text":"","code":"data(admin) data(jvs) jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  res_glm <- method_glm(y_nons = admin$single_shift,                       X_nons = model.matrix(~ region + private + nace + size, admin),                       X_rand = model.matrix(~ region + private + nace + size, jvs),                       svydesign = jvs_svy)  res_glm #> Mass imputation model (GLM approach). Estimated mean: 0.7039 (se: 0.0115)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":null,"dir":"Reference","previous_headings":"","what":"Mass imputation using nearest neighbours matching method — method_nn","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"Mass imputation using nearest neighbours approach described Yang et al. (2021). implementation currently based RANN::nn2 function thus uses Euclidean distance matching units \\(S_A\\) (non-probability) \\(S_B\\) (probability). Estimation mean done using \\(S_B\\) sample.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"","code":"method_nn(   y_nons,   X_nons,   X_rand,   svydesign,   weights = NULL,   family_outcome = NULL,   start_outcome = NULL,   vars_selection = FALSE,   pop_totals = NULL,   pop_size = NULL,   control_outcome = control_out(),   control_inference = control_inf(),   verbose = FALSE,   se = TRUE )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"y_nons target variable non-probability sample X_nons model.matrix auxiliary variables non-probability sample X_rand model.matrix auxiliary variables non-probability sample svydesign svydesign object weights case / frequency weights non-probability sample family_outcome placeholder (used method_nn) start_outcome placeholder (used method_nn) vars_selection whether variable selection conducted pop_totals placeholder (used method_nn) pop_size population size nonprob function control_outcome controls passed control_out function control_inference controls passed control_inf function verbose parameter passed main nonprob function se whether standard errors calculated","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"nonprob_method class list following entries model_fitted RANN::nn2 object y_nons_pred predicted values non-probablity sample (query ) y_rand_pred predicted values probability sample coefficients coefficients model (available) svydesign updated surveydesign2 object (new column y_hat_MI added) y_mi_hat estimated population mean target variable vars_selection whether variable selection performed (implemented, development) var_prob variance probability sample component (available) var_nonprob variance non-probability sample component var_tot total variance, possible var_prob+var_nonprob , just scalar model model type (character \"nn\") family placeholder NN approach information","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"Analytical variance variance mean estimated based following approach () non-probability part  (\\(S_A\\) size \\(n_A\\); denoted var_nonprob result) may estimated using $$ \\hat{V}_1 = \\frac{1}{N^2}\\sum_{=1}^{S_A}\\frac{1-\\hat{\\pi}_B(\\boldsymbol{x}_i)}{\\hat{\\pi}_B(\\boldsymbol{x}_i)}\\hat{\\sigma}^2(\\boldsymbol{x}_i), $$ \\(\\hat{\\pi}_B(\\boldsymbol{x}_i)\\) estimator propensity scores currently estimate using \\(n_A/N\\) (constant) \\(\\hat{\\sigma}^2(\\boldsymbol{x}_i)\\) estimated using based average \\((y_i - y_i^*)^2\\). Chlebicki et al. (2025, Algorithm 2) proposed non-parametric mini-bootstrap estimator (without assuming consistent) good finite population properties. bootstrap can applied using control_inference(nn_exact_se=TRUE) can summarized follows: Sample \\(n_A\\) units \\(S_A\\) replacement create \\(S_A'\\) (pseudo-weights present inclusion probabilities proportional inverses). Match units \\(S_B\\) \\(S_A'\\) obtain predictions \\(y^*\\)=\\({k}^{-1}\\sum_{k}y_k\\). Estimate \\(\\hat{\\mu}=\\frac{1}{N} \\sum_{\\S_B} d_i y_i^*\\). Repeat steps 1-3 \\(M\\) times (set \\(M=50\\) simulations; hard-coded). Estimate \\(\\hat{V}_1=\\text{var}({\\hat{\\boldsymbol{\\mu}}})\\) obtained simulations save var_nonprob. (b) probability part (\\(S_B\\) size \\(n_B\\); denoted var_prob result) part uses functionalities {survey} package variance estimated using following equation: $$ \\hat{V}_2=\\frac{1}{N^2} \\sum_{=1}^n \\sum_{j=1}^n \\frac{\\pi_{j}-\\pi_i \\pi_j}{\\pi_{j}} \\frac{y_i^*}{\\pi_i} \\frac{y_j^*}{\\pi_j}, $$ \\(y^*_i\\) \\(y_j^*\\) values imputed imputed average \\(k\\)-nearest neighbour, .e. \\({k}^{-1}\\sum_{k}y_k\\). Note \\(\\hat{V}_2\\) principle can estimated various ways depending type design whether population size known .","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"Yang, S., Kim, J. K., & Hwang, Y. (2021). Integration data probability surveys big found data finite population inference using mass imputation. Survey Methodology, June 2021 29 Vol. 47, . 1, pp. 29-58 Chlebicki, P., Chrostowski, Ł., & Beręsewicz, M. (2025). Data integration non-probability probability samples predictive mean matching. arXiv preprint arXiv:2403.13750.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_nn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mass imputation using nearest neighbours matching method — method_nn","text":"","code":"data(admin) data(jvs) jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  res_nn <- method_nn(y_nons = admin$single_shift,                     X_nons = model.matrix(~ region + private + nace + size, admin),                     X_rand = model.matrix(~ region + private + nace + size, jvs),                     svydesign = jvs_svy)  res_nn #> Mass imputation model (NN approach). Estimated mean: 0.6800 (se: 0.0157)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":null,"dir":"Reference","previous_headings":"","what":"Mass imputation using non-parametric model method — method_npar","title":"Mass imputation using non-parametric model method — method_npar","text":"Model outcome mass imputation estimator using loess via stats::loess. Estimation mean done using \\(S_B\\) probability sample.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mass imputation using non-parametric model method — method_npar","text":"","code":"method_npar(   y_nons,   X_nons,   X_rand,   svydesign,   weights = NULL,   family_outcome = \"gaussian\",   start_outcome = NULL,   vars_selection = FALSE,   pop_totals = NULL,   pop_size = NULL,   control_outcome = control_out(),   control_inference = control_inf(),   verbose = FALSE,   se = TRUE )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mass imputation using non-parametric model method — method_npar","text":"y_nons target variable non-probability sample X_nons model.matrix auxiliary variables non-probability sample X_rand model.matrix auxiliary variables non-probability sample svydesign svydesign object weights case / frequency weights non-probability sample (default NULL) family_outcome family glm model) start_outcome place holder (used method_npar) vars_selection whether variable selection conducted pop_totals place holder (used method_npar) pop_size population size nonprob function control_outcome controls passed control_out function control_inference controls passed control_inf function verbose parameter passed main nonprob function se whether standard errors calculated","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mass imputation using non-parametric model method — method_npar","text":"nonprob_method class list following entries model_fitted fitted model object returned stats::loess y_nons_pred predicted values non-probablity sample y_rand_pred predicted values probability sample population totals coefficients coefficients model (available) svydesign updated surveydesign2 object (new column y_hat_MI added) y_mi_hat estimated population mean target variable vars_selection whether variable selection performed var_prob variance probability sample component (available) var_nonprob variance non-probability sampl component model model type (character \"npar\")","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mass imputation using non-parametric model method — method_npar","text":"Analytical variance variance mean estimated based following approach () non-probability part  (\\(S_A\\) size \\(n_A\\); denoted var_nonprob result) $$ \\hat{V}_1 = \\frac{1}{N^2} \\sum_{=1}^{n_A} \\left\\lbrace\\hat{g}_B(\\boldsymbol{x}_i)\\right\\rbrace^{2} \\hat{e}_i^2, $$ \\(\\hat{e}_i=y_i - \\hat{m}(x_i)\\) residual \\(\\hat{g}_B(\\boldsymbol{x}_i) = \\left\\lbrace \\pi_B(\\boldsymbol{x}_i) \\right\\rbrace^{-1}\\) can estimated various ways. package estimate \\(\\hat{g}_B(\\boldsymbol{x}_i)\\) using \\(\\pi_B(\\boldsymbol{x}_i)=E(R | \\boldsymbol{x})\\) suggested Chen et al. (2022, p. 6). particular, currently support using stats::loesswith\"gaussian\"` family. (b) probability part (\\(S_B\\) size \\(n_B\\); denoted var_prob result) part uses functionalities {survey} package variance estimated using following equation: $$ \\hat{V}_2=\\frac{1}{N^2} \\sum_{=1}^{n_B} \\sum_{j=1}^{n_B} \\frac{\\pi_{j}-\\pi_i \\pi_j}{\\pi_{j}} \\frac{\\hat{m}(x_i)}{\\pi_i} \\frac{\\hat{m}(x_j)}{\\pi_j}. $$ Note \\(\\hat{V}_2\\) principle can estimated various ways depending type design whether population size known .","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mass imputation using non-parametric model method — method_npar","text":"Chen, S., Yang, S., & Kim, J. K. (2022). Nonparametric mass imputation data integration. Journal Survey Statistics Methodology, 10(1), 1-24.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_npar.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mass imputation using non-parametric model method — method_npar","text":"","code":"set.seed(123123123) N <- 10000 n_a <- 500 n_b <- 1000 n_b1 <- 0.7*n_b n_b2 <- 0.3*n_b x1 <- rnorm(N, 2, 1) x2 <- rnorm(N, 2, 1) y1 <- rnorm(N, 0.3 + 2*x1+ 2*x2, 1) y2 <- rnorm(N, 0.3 + 0.5*x1^2+ 0.5*x2^2, 1) strata <- x1 <= 2 pop <- data.frame(x1, x2, y1, y2, strata) sample_a <- pop[sample(1:N, n_a),] sample_a$w_a <- N/n_a sample_a_svy <- svydesign(ids=~1, weights=~w_a, data=sample_a) pop1 <- subset(pop, strata == TRUE) pop2 <- subset(pop, strata == FALSE) sample_b <- rbind(pop1[sample(1:nrow(pop1), n_b1), ],                   pop2[sample(1:nrow(pop2), n_b2), ]) res_y_npar <- nonprob(outcome = y1 + y2 ~ x1 + x2,                       data = sample_b,                       svydesign = sample_a_svy,                       method_outcome = \"npar\") res_y_npar #> A nonprob object #>  - estimator type: mass imputation #>  - method: npar (gaussian) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y1: 7.5715 #>    - variable y2: 4.6272 #>  - selected estimators: #>    - variable y1: 8.3408 (se=0.1221, ci=(8.1015, 8.5802)) #>    - variable y2: 5.3156 (se=0.1295, ci=(5.0618, 5.5695))"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_pmm.html","id":null,"dir":"Reference","previous_headings":"","what":"Mass imputation using predictive mean matching method — method_pmm","title":"Mass imputation using predictive mean matching method — method_pmm","text":"Model outcome mass imputation estimator. implementation currently based RANN::nn2 function thus uses Euclidean distance matching units \\(S_A\\) (non-probability) \\(S_B\\) (probability) based predicted values model \\(\\boldsymbol{x}_i\\) based either method_glm method_npar. Estimation mean done using \\(S_B\\) sample. implementation extends Yang et al. (2021) approach described Chlebicki et al. (2025), namely: pmm_weights k>1 weighted aggregation mean given unit used. use distance matrix returned RANN::nn2 function (pmm_weights control_out() function) nn_exact_se non-probability sample small recommend using mini-bootstrap approach estimate variance non-probability sample  (nn_exact_se control_inf() function) pmm_k_choice main nonprob function allows dynamic selection k neighbours based variance minimization procedure (pmm_k_choice control_out() function)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_pmm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mass imputation using predictive mean matching method — method_pmm","text":"","code":"method_pmm(   y_nons,   X_nons,   X_rand,   svydesign,   weights = NULL,   family_outcome = \"gaussian\",   start_outcome = NULL,   vars_selection = FALSE,   pop_totals = NULL,   pop_size = NULL,   control_outcome = control_out(),   control_inference = control_inf(),   verbose = FALSE,   se = TRUE )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_pmm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mass imputation using predictive mean matching method — method_pmm","text":"y_nons target variable non-probability sample X_nons model.matrix auxiliary variables non-probability sample X_rand model.matrix auxiliary variables non-probability sample svydesign svydesign object weights case / frequency weights non-probability sample family_outcome family glm model start_outcome start parameters vars_selection whether variable selection conducted pop_totals place holder (used method_pmm) pop_size population size nonprob function control_outcome controls passed control_out function control_inference controls passed control_inf function verbose parameter passed main nonprob function se whether standard errors calculated","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_pmm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mass imputation using predictive mean matching method — method_pmm","text":"nonprob_method class list following entries model_fitted fitted model either glm.fit cv.ncvreg object y_nons_pred predicted values non-probablity sample y_rand_pred predicted values probability sample population totals coefficients coefficients model (available) svydesign updated surveydesign2 object (new column y_hat_MI added) y_mi_hat estimated population mean target variable vars_selection whether variable selection performed var_prob variance probability sample component (available) var_nonprob variance non-probability sampl component model model type (character \"pmm\") family depends method selected estimating E(Y|X)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_pmm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mass imputation using predictive mean matching method — method_pmm","text":"Matching package support two types matching: \\(\\hat{y} - \\hat{y}\\) matching (default; control_out(pmm_match_type = 1)). \\(\\hat{y} - y\\) matching (control_out(pmm_match_type = 2)). Analytical variance variance mean estimated based following approach () non-probability part  (\\(S_A\\) size \\(n_A\\); denoted var_nonprob result) currently estimated using non-parametric mini-bootstrap estimator proposed Chlebicki et al. (2025, Algorithm 2). proved consistent good finite population properties. bootstrap can applied using control_inference(nn_exact_se=TRUE) can summarized follows: Sample \\(n_A\\) units \\(S_A\\) replacement create \\(S_A'\\) (pseudo-weights present inclusion probabilities proportional inverses). Estimate regression model \\(\\mathbb{E}[Y|\\boldsymbol{X}]=m(\\boldsymbol{X}, \\cdot)\\) based \\(S_{}'\\) step 1. Compute \\(\\hat{\\nu}'(,t)\\) \\(t=1,\\dots,k, \\S_{B}\\) using estimated \\(m(\\boldsymbol{x}', \\cdot)\\) \\(\\left\\lbrace(y_{j},\\boldsymbol{x}_{j})| j\\S_{}'\\right\\rbrace\\). Compute \\(\\displaystyle\\frac{1}{k}\\sum_{t=1}^{k}y_{\\hat{\\nu}'()}\\) using \\(Y\\) values \\(S_{}'\\). Repeat steps 1-4 \\(M\\) times (set (hard-coded) \\(M=50\\) code). Estimate \\(\\hat{V}_1=\\text{var}({\\hat{\\boldsymbol{\\mu}}})\\) obtained simulations save var_nonprob. (b) probability part (\\(S_B\\) size \\(n_B\\); denoted var_prob result) part uses functionalities {survey} package variance estimated using following equation: $$ \\hat{V}_2=\\frac{1}{N^2} \\sum_{=1}^{n_B} \\sum_{j=1}^{n_B} \\frac{\\pi_{j}-\\pi_i \\pi_j}{\\pi_{j}} \\frac{m(\\boldsymbol{x}_i; \\hat{\\boldsymbol{\\beta}})}{\\pi_i} \\frac{m(\\boldsymbol{x}_i; \\hat{\\boldsymbol{\\beta}})}{\\pi_j}. $$ Note \\(\\hat{V}_2\\) principle can estimated various ways depending type design whether population size known .","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_pmm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mass imputation using predictive mean matching method — method_pmm","text":"","code":"data(admin) data(jvs) jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  res_pmm <- method_pmm(y_nons = admin$single_shift,                       X_nons = model.matrix(~ region + private + nace + size, admin),                       X_rand = model.matrix(~ region + private + nace + size, jvs),                       svydesign = jvs_svy)  res_pmm #> Mass imputation model (PMM approach). Estimated mean: 0.6969 (se: 0.0146)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_ps.html","id":null,"dir":"Reference","previous_headings":"","what":"Propensity Score Model Functions — method_ps","title":"Propensity Score Model Functions — method_ps","text":"Function specify propensity score (PS) model inverse probability weighting estimator. function provides basic functions logistic regression given link function (currently support logit, probit cloglog) additional information analytic variance estimator mean. function returns list functions refer specific estimation methods variance estimators whether IPW alone DR estimator applied. export function mainly functions used variable selection algorithms. Functions starting make_log_like, make_gradient make_hessian refer maximum likelihood estimation described Chen et al. (2020) paper. functions take account different link functions defined link argument. Functions make_link, make_link_inv, make_link_der, make_link_inv_der, make_link_inv_rev, make_link_inv_rev_der refer specific link functions used estimation process. Functions variance_covariance1 variance_covariance2 refer variance estimator IPW estimator defined Chen et al. (2020). Functions b_vec_ipw, b_vec_dr t_vec specific functions defined Chen et al. (2020) used variance estimator IPW DR. Finally, var_nonprob non-probability component DR estimator defined Chen et al. (2020).","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_ps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Propensity Score Model Functions — method_ps","text":"","code":"method_ps(link = c(\"logit\", \"probit\", \"cloglog\"), ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_ps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Propensity Score Model Functions — method_ps","text":"link link PS model ... Additional, optional arguments.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_ps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Propensity Score Model Functions — method_ps","text":"list functions elements specific link function following entries: make_log_like log-likelihood function specific link function make_gradient gradient loglik make_hessian hessian loglik make_link link function make_link_inv inverse link function make_link_der first derivative link function make_link_inv_der first derivative inverse link function make_link_inv_rev defines 1/inv_link make_link_inv_rev_der first derivative 1/inv_link variance_covariance1 IPW estimator: variance component non-probability sample variance_covariance2 IPW estimator: variance component probability sample b_vec_ipw IPW estimator: \\(b\\) function defined Chen et al. (2020, sec. 3.2, eq. (9)-(10); sec 4.1) b_vec_dr DR estimator: \\(b\\) function defined Chen et al. (2020, sec. 3.3., eq. (14); sec 4.1) t_vec DR estimator: \\(b\\) function defined Chen et al. (2020, sec. 3.3., eq. (14); sec 4.1) var_nonprob DR estimator: non-probability component variance DR estimator link name selected link function PS model (character) model model type (character)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_ps.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Propensity Score Model Functions — method_ps","text":"Łukasz Chrostowski, Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/method_ps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Propensity Score Model Functions — method_ps","text":"","code":"# Printing information on the model selected  method_ps() #> Propensity score model with logit link  # extracting specific field  method_ps(\"cloglog\")$make_gradient #> function (X_nons, X_rand, weights, weights_rand, ...)  #> { #>     function(theta) { #>         eta1 <- as.matrix(X_nons) %*% theta #>         eta2 <- as.matrix(X_rand) %*% theta #>         invLink1 <- inv_link(eta1) #>         invLink2 <- inv_link(eta2) #>         t(crossprod(X_nons, weights * exp(eta1)/invLink1) - crossprod(X_rand,  #>             weights_rand * exp(eta2))) #>     } #> } #> <bytecode: 0x5557baa75c78> #> <environment: 0x5557c74503f8>"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nobs.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the number of rows in samples — nobs.nonprob","title":"Returns the number of rows in samples — nobs.nonprob","text":"Returns information number rows probability sample (provided) non-probability sample.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nobs.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the number of rows in samples — nobs.nonprob","text":"","code":"# S3 method for class 'nonprob' nobs(object, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nobs.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the number of rows in samples — nobs.nonprob","text":"object nonprob class object ... arguments passed methods (currently supported)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nobs.nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the number of rows in samples — nobs.nonprob","text":"named vector row numbers","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Inference with non-probability survey samples — nonprob","title":"Inference with non-probability survey samples — nonprob","text":"nonprob function provides access various methods inference based non-probability surveys (including big data). function allows estimate population mean based access reference probability sample (via survey package),  well totals means covariates. package implements state---art approaches recently proposed literature: Chen et al. (2020), Yang et al. (2020), Wu (2022) uses Lumley 2004 survey package inference (reference probability sample provided). provides various inverse probability weighting (e.g. calibration constraints), mass imputation (e.g. nearest neighbour, predictive mean matching) doubly robust estimators (e.g. take account minimisation asymptotic bias population mean estimators). package uses survey package functionality probability sample available. optional parameters set NULL. obligatory ones include data well one following three: selection, outcome, target – depending method selected. case outcome target multiple \\(y\\) variables can specified.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Inference with non-probability survey samples — nonprob","text":"","code":"nonprob(   data,   selection = NULL,   outcome = NULL,   target = NULL,   svydesign = NULL,   pop_totals = NULL,   pop_means = NULL,   pop_size = NULL,   method_selection = c(\"logit\", \"cloglog\", \"probit\"),   method_outcome = c(\"glm\", \"nn\", \"pmm\", \"npar\"),   family_outcome = c(\"gaussian\", \"binomial\", \"poisson\"),   subset = NULL,   strata = NULL,   case_weights = NULL,   na_action = na.omit,   control_selection = control_sel(),   control_outcome = control_out(),   control_inference = control_inf(),   start_selection = NULL,   start_outcome = NULL,   verbose = FALSE,   se = TRUE,   ... )"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Inference with non-probability survey samples — nonprob","text":"data data.frame dataset containing non-probability sample selection formula (default NULL) selection (propensity) score model outcome formula (default NULL) outcome (target) model target formula (default NULL) target variable(s). allow multiple target variables (e.g. ~y1 + y2 + y3) svydesign optional svydesign2 class object containing probability sample design weights pop_totals optional named vector population totals covariates pop_means optional named vector population means covariates pop_size optional double value population size method_selection character (default logit) indicating method propensity score link function. method_outcome character (default glm) indicating method outcome model. family_outcome character (default gaussian)  describing error distribution link function used model. Currently supports: gaussian identity link, poisson binomial. subset optional vector specifying subset observations used fitting process strata optional vector specifying strata (yet supported, development) case_weights optional vector prior weights used fitting process. assumed vector contains frequency analytic weights (.e. rows data argument repeated according values case_weights argument), probability/design weights. na_action function indicates happen data contain NAs (default na.omit method currently supported) control_selection list (default control_sel() result) indicating parameters used fitting selection model propensity scores. change parameters one use control_sel() function control_outcome list (default control_out() result) indicating parameters used fitting model outcome variable. change parameters one use control_out() function control_inference list (default control_inf() result) indicating parameters used inference based probability non-probability samples. change parameters one use control_inf() function start_selection optional vector starting values parameters selection equation start_outcome optional vector starting values parameters outcome equation verbose numerical value (default TRUE) whether detailed information fitting presented se Logical value (default TRUE) indicating whether calculate return standard error estimated mean. ... Additional, optional arguments","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Inference with non-probability survey samples — nonprob","text":"Returns object nonprob class (actually list) contains following elements: call – call nonprob function data – data.frame passed nonprob function data argument X – model.matrix containing data probability (first \\(n_{S_B}\\) rows) non-probability samples (next \\(n_{S_B}\\) rows) specified function call y – list vector outcome variables specified function call R – numeric vector indicating whether unit belongs probability (0) non-probability (1) units matrix X ps_scores – numeric vector estimated propensity scores probability non-probability sample case_weights – vector case weights non-probability sample based call ipw_weights – vector inverse probability weights non-probability sample (applicable) control – list control functions based call output – data.frame estimated means standard errors variables specified target outcome arguments SE – data.frame standard error estimator population mean, divided errors probability non-probability samples (applicable) confidence_interval – data.frame confidence interval population mean estimator nonprob_size – scalar numeric vector denoting size non-probability sample prob_size – scalar numeric vector denoting size probability sample pop_size – scalar numeric vector estimated population size derived estimated weights (non-probability sample) known design weights (probability sample) pop_size_fixed – logical value whether population size fixed (known) estimated (unknown) pop_totals – numeric vector total values auxiliary variables derived probability sample based call pop_means – numeric vector mean values auxiliary variables derived probability sample based call outcome – list containing information fitting mass imputation model. Structure object based method_outcome family_outcome arguments point specific methods defined functions method_* (specified call) selection – list containing information fitting propensity score model. Structure object based method_selection argument point specific methods defined functions method_ps (specified call) boot_sample – matrix bootstrap estimates target variable(s) (specified) svydesign – svydesign2 object (specified) ys_rand_pred – list predicted values target variable(s) probability sample (MI DR estimator) ys_nons_pred – list predicted values target variable(s) non-probability sample (MI DR estimator) ys_resid – list residuals target variable(s) non-probability sample (MI DR estimator) estimator – character vector information type estimator selected (one c(\"ipw\", \"mi\", \"dr\")). selection_formula – formula based selection argument (specified) estimator_method – character vector information detailed method applied (print method)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Inference with non-probability survey samples — nonprob","text":"Let \\(y\\) response variable want estimate population mean, given $$\\mu_{y} = \\frac{1}{N} \\sum_{=1}^N y_{}.$$ purpose consider data integration following structure. Let \\(S_A\\) non-probability sample design matrix covariates $$ \\boldsymbol{X}_A =   \\begin{bmatrix} x_{11} & x_{12} & \\cdots & x_{1p} \\cr x_{21} & x_{22} & \\cdots & x_{2p} \\cr \\vdots & \\vdots & \\ddots & \\vdots \\cr x_{n_{A1}} & x_{n_{A2}} & \\cdots & x_{n_{Ap}} \\cr \\end{bmatrix}, $$ vector outcome variable $$ \\boldsymbol{y} =   \\begin{bmatrix} y_{1} \\cr y_{2} \\cr \\vdots \\cr y_{n_{}} \\end{bmatrix}. $$ hand, let \\(S_B\\) probability sample design matrix covariates $$ \\boldsymbol{X}_B =   \\begin{bmatrix} x_{11} & x_{12} & \\cdots & x_{1p} \\cr x_{21} & x_{22} & \\cdots & x_{2p} \\cr \\vdots & \\vdots & \\ddots & \\vdots \\cr x_{n_{B1}} & x_{n_{B2}} & \\cdots & x_{n_{Bp}}\\cr \\end{bmatrix}. $$ Instead sample units can consider vector population sums form \\(\\tau_x = (\\sum_{\\\\mathcal{U}}\\boldsymbol{x}_{i1}, \\sum_{\\\\mathcal{U}}\\boldsymbol{x}_{i2}, ..., \\sum_{\\\\mathcal{U}}\\boldsymbol{x}_{ip})\\) means \\(\\frac{\\tau_x}{N}\\), \\(\\mathcal{U}\\) refers finite population. Note assume access response variable \\(S_B\\). general make following assumptions: selection indicator belonging non-probability sample \\(R_{}\\) response variable \\(y_i\\) independent given set covariates \\(\\boldsymbol{x}_i\\). units non-zero propensity score, .e., \\(\\pi_{}^{} > 0\\) . indicator variables \\(R_{}^{}\\) \\(R_{j}^{}\\) independent given \\(\\boldsymbol{x}_i\\) \\(\\boldsymbol{x}_j\\) \\(\\neq j\\). three possible approaches problem estimating population mean using non-probability samples: Inverse probability weighting – main drawback non-probability sampling unknown selection mechanism unit included sample. talk -called \"biased sample\" problem. inverse probability approach based assumption reference probability sample available therefore can estimate propensity score selection mechanism. estimator following form: $$\\hat{\\mu}_{IPW} = \\frac{1}{N^{}}\\sum_{\\S_{}} \\frac{y_{}}{\\hat{\\pi}_{}^{}}.$$ purpose several estimation methods can considered. first approach maximum likelihood estimation corrected log-likelihood function, given following formula $$  \\ell^{*}(\\boldsymbol{\\theta}) = \\sum_{\\S_{}}\\log \\left\\lbrace \\frac{\\pi(\\boldsymbol{x}_{}, \\boldsymbol{\\theta})}{1 - \\pi(\\boldsymbol{x}_{},\\boldsymbol{\\theta})}\\right\\rbrace + \\sum_{\\S_{B}}d_{}^{B}\\log \\left\\lbrace 1 - \\pi({\\boldsymbol{x}_{},\\boldsymbol{\\theta})}\\right\\rbrace.$$ literature, main approach modelling propensity scores based logit link function. However, extend propensity score model additional link functions cloglog probit. pseudo-score equations derived ML methods can replaced idea generalised estimating equations calibration constraints defined equations. $$  \\mathbf{U}(\\boldsymbol{\\theta})=\\sum_{\\S_A} \\mathbf{h}\\left(\\mathbf{x}_i, \\boldsymbol{\\theta}\\right)-\\sum_{\\S_B} d_i^B \\pi\\left(\\mathbf{x}_i, \\boldsymbol{\\theta}\\right) \\mathbf{h}\\left(\\mathbf{x}_i, \\boldsymbol{\\theta}\\right).$$ Notice \\( \\mathbf{h}\\left(\\mathbf{x}_i, \\boldsymbol{\\theta}\\right) = \\frac{\\pi(\\boldsymbol{x}, \\boldsymbol{\\theta})}{\\boldsymbol{x}}\\) need probability sample can use vector population totals/means. Mass imputation – method based framework imputed values outcome variables created entire probability sample. case, treat large sample training data set used build imputation model. Using imputed values probability sample (known) design weights, can build population mean estimator form: $$\\hat{\\mu}_{MI} = \\frac{1}{N^B}\\sum_{\\S_{B}} d_{}^{B} \\hat{y}_i.$$ opens door flexible method imputation models. package uses generalized linear models stats::glm(), nearest neighbour algorithm using RANN::nn2() predictive mean matching. Doubly robust estimation – IPW MI estimators sensitive misspecified models propensity score outcome variable, respectively. end, -called doubly robust methods presented take problems account. simple idea combine propensity score imputation models inference, leading following estimator $$\\hat{\\mu}_{DR} = \\frac{1}{N^}\\sum_{\\S_A} \\hat{d}_i^(y_i - \\hat{y}_i) + \\frac{1}{N^B}\\sum_{\\S_B} d_i^B \\hat{y}_i.$$ addition, approach based directly bias minimisation implemented. following formula $$    \\begin{aligned}    bias(\\hat{\\mu}_{DR}) = & \\mathbb{E} (\\hat{\\mu}_{DR} - \\mu) \\cr = & \\mathbb{E} \\left\\lbrace \\frac{1}{N} \\sum_{=1}^N (\\frac{R_i^}{\\pi_i^(\\boldsymbol{x}_i^{\\mathrm{T}} \\boldsymbol{\\theta})}    - 1 ) (y_i - \\operatorname{m}(\\boldsymbol{x}_i^{\\mathrm{T}} \\boldsymbol{\\beta})) \\right\\rbrace \\cr + & \\mathbb{E} \\left\\lbrace \\frac{1}{N} \\sum_{=1}^N (R_i^B d_i^B - 1) \\operatorname{m}( \\boldsymbol{x}_i^{\\mathrm{T}} \\boldsymbol{\\beta}) \\right\\rbrace,    \\end{aligned}    $$ lead us system equations $$    \\begin{aligned}    J(\\theta, \\beta) =    \\left\\lbrace    \\begin{array}{c}                       J_1(\\theta, \\beta) \\cr                       J_2(\\theta, \\beta)                       \\end{array}\\right\\rbrace = \\left\\lbrace \\begin{array}{c}                                                \\sum_{=1}^N R_i^\\ \\left\\lbrace \\frac{1}{\\pi(\\boldsymbol{x}_i, \\boldsymbol{\\theta})}-1 \\right\\rbrace \\left\\lbrace y_i-m(\\boldsymbol{x}_i, \\boldsymbol{\\beta}) \\right\\rbrace \\boldsymbol{x}_i \\cr                                                \\sum_{=1}^N \\frac{R_i^}{\\pi(\\boldsymbol{x}_i, \\boldsymbol{\\theta})} \\frac{\\partial m(\\boldsymbol{x}_i, \\boldsymbol{\\beta})}{\\partial \\boldsymbol{\\beta}}                                                - \\sum_{\\\\mathcal{S}_{\\mathrm{B}}} d_i^{\\mathrm{B}} \\frac{\\partial m(\\boldsymbol{x}_i, \\boldsymbol{\\beta})}{\\partial \\boldsymbol{\\beta}}   \\end{array} \\right\\rbrace,   \\end{aligned}   $$ \\(m\\left(\\boldsymbol{x}_{}, \\boldsymbol{\\beta}\\right)\\) mass imputation (regression) model outcome variable propensity scores \\(\\pi_i^\\) estimated using logit function model. MLE GEE approaches extended method cloglog probit links. straightforward calculate variances estimators, asymptotic equivalents variances derived using Taylor approximation proposed literature. Details can found . addition, bootstrap approach can used variance estimation. function also allows variables selection using known methods implemented handle integration probability non-probability sampling. presence high-dimensional data, variable selection important, can reduce variability estimate results using irrelevant variables build model. Let \\(\\operatorname{U}\\left( \\boldsymbol{\\theta}, \\boldsymbol{\\beta} \\right)\\) joint estimating function \\(\\left( \\boldsymbol{\\theta}, \\boldsymbol{\\beta} \\right)\\). define penalized estimating functions $$   \\operatorname{U}^p \\left(\\boldsymbol{\\theta}, \\boldsymbol{\\beta}\\right) =   \\operatorname{U}\\left(\\boldsymbol{\\theta}, \\boldsymbol{\\beta}\\right) -   \\left\\lbrace   \\begin{array}{c}   q_{\\lambda_\\theta}(|\\boldsymbol{\\theta}|) \\operatorname{sgn}(\\boldsymbol{\\theta}) \\\\   q_{\\lambda_\\beta}(|\\boldsymbol{\\beta}|) \\operatorname{sgn}(\\boldsymbol{\\beta})   \\end{array}   \\right\\rbrace,   $$ \\(\\lambda_{\\theta}\\) \\(q_{\\lambda_{\\beta}}\\) smooth functions. let \\(q_{\\lambda} \\left(x\\right) = \\frac{\\partial p_{\\lambda}}{\\partial x}\\), \\(p_{\\lambda}\\) penalization function. Details penalization functions techniques solving type equation can found . use variable selection model, set vars_selection parameter control_inf() function TRUE. addition, control functions control_sel() control_out() can set parameters selection relevant variables, number folds cross-validation algorithm lambda value penalizations. Details can found documentation control functions nonprob.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Inference with non-probability survey samples — nonprob","text":"Kim JK, Park S, Chen Y, Wu C. Combining non-probability probability survey samples mass imputation. J R Stat Soc Series . 2021;184:941– 963. Shu Yang, Jae Kwang Kim, Rui Song. Doubly robust inference combining probability non-probability samples high dimensional data. J. R. Statist. Soc. B (2020) Yilin Chen , Pengfei Li & Changbao Wu (2020) Doubly Robust Inference Nonprobability Survey Samples, Journal American Statistical Association, 115:532, 2011-2021 Shu Yang, Jae Kwang Kim Youngdeok Hwang Integration data probability surveys big found data finite population inference using mass imputation. Survey Methodology, June 2021 29 Vol. 47, . 1, pp. 29-58","code":""},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Inference with non-probability survey samples — nonprob","text":"Łukasz Chrostowski, Maciej Beręsewicz, Piotr Chlebicki","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Inference with non-probability survey samples — nonprob","text":"","code":"# \\donttest{ # generate data based on Doubly Robust Inference With Non-probability Survey Samples (2021) # Yilin Chen , Pengfei Li & Changbao Wu set.seed(123) # sizes of population and probability sample N <- 20000 # population n_b <- 1000 # probability # data z1 <- rbinom(N, 1, 0.7) z2 <- runif(N, 0, 2) z3 <- rexp(N, 1) z4 <- rchisq(N, 4)  # covariates x1 <- z1 x2 <- z2 + 0.3 * z2 x3 <- z3 + 0.2 * (z1 + z2) x4 <- z4 + 0.1 * (z1 + z2 + z3) epsilon <- rnorm(N) sigma_30 <- 10.4 sigma_50 <- 5.2 sigma_80 <- 2.4  # response variables y30 <- 2 + x1 + x2 + x3 + x4 + sigma_30 * epsilon y50 <- 2 + x1 + x2 + x3 + x4 + sigma_50 * epsilon y80 <- 2 + x1 + x2 + x3 + x4 + sigma_80 * epsilon  # population sim_data <- data.frame(y30, y50, y80, x1, x2, x3, x4) ## propensity score model for non-probability sample (sum to 1000) eta <- -4.461 + 0.1 * x1 + 0.2 * x2 + 0.1 * x3 + 0.2 * x4 rho <- plogis(eta)  # inclusion probabilities for probability sample z_prob <- x3 + 0.2051 sim_data$p_prob <- n_b* z_prob/sum(z_prob)  # data sim_data$flag_nonprob <- as.numeric(runif(N) < rho) ## sampling nonprob sim_data$flag_prob <- as.numeric(runif(n_b) < sim_data$p_prob) ## sampling prob nonprob_df <- subset(sim_data, flag_nonprob == 1) ## non-probability sample svyprob <- svydesign(   ids = ~1, probs = ~p_prob,   data = subset(sim_data, flag_prob == 1),   pps = \"brewer\" ) ## probability sample  ## mass imputation estimator mi_res <- nonprob(   outcome = y30 + y50 + y80 ~ x1 + x2 + x3 + x4,   data = nonprob_df,   svydesign = svyprob ) mi_res #> A nonprob object #>  - estimator type: mass imputation #>  - method: glm (gaussian) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y30: 11.8211 #>    - variable y50: 11.9242 #>    - variable y80: 11.9797 #>  - selected estimators: #>    - variable y30: 9.4791 (se=0.3927, ci=(8.7094, 10.2488)) #>    - variable y50: 9.5458 (se=0.2241, ci=(9.1067, 9.9850)) #>    - variable y80: 9.5818 (se=0.1517, ci=(9.2845, 9.8791)) ## inverse probability weighted estimator ipw_res <- nonprob(   selection = ~ x1 + x2 + x3 + x4,   target = ~y30 + y50 + y80,   data = nonprob_df,   svydesign = svyprob ) ipw_res #> A nonprob object #>  - estimator type: inverse probability weighting #>  - method: logit (mle) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y30: 11.8211 #>    - variable y50: 11.9242 #>    - variable y80: 11.9797 #>  - selected estimators: #>    - variable y30: 9.3798 (se=0.5655, ci=(8.2714, 10.4881)) #>    - variable y50: 9.5155 (se=0.5655, ci=(8.4071, 10.6238)) #>    - variable y80: 9.5886 (se=0.5655, ci=(8.4802, 10.6969)) ## doubly robust estimator dr_res <- nonprob(   outcome = y30 + y50 + y80 ~ x1 + x2 + x3 + x4,   selection = ~ x1 + x2 + x3 + x4,   data = nonprob_df,   svydesign = svyprob ) dr_res #> A nonprob object #>  - estimator type: doubly robust #>  - method: glm (gaussian) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimators: #>    - variable y30: 11.8211 #>    - variable y50: 11.9242 #>    - variable y80: 11.9797 #>  - selected estimators: #>    - variable y30: 9.3388 (se=0.4548, ci=(8.4473, 10.2302)) #>    - variable y50: 9.4757 (se=0.2578, ci=(8.9704, 9.9810)) #>    - variable y80: 9.5494 (se=0.1745, ci=(9.2075, 9.8913)) # }"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/plot.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots the estimated mean(s) and their confidence interval(s) — plot.nonprob","title":"Plots the estimated mean(s) and their confidence interval(s) — plot.nonprob","text":"Simple plotting method compares estimated mean(s) CI(s) naive (uncorrected) estimates.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/plot.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots the estimated mean(s) and their confidence interval(s) — plot.nonprob","text":"","code":"# S3 method for class 'nonprob' plot(x, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/plot.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots the estimated mean(s) and their confidence interval(s) — plot.nonprob","text":"x nonprob class object ... arguments passed plot method (currently supported)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/plot.nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots the estimated mean(s) and their confidence interval(s) — plot.nonprob","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\")  plot(ipw_est1)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/pop_size.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns population size (estimated or fixed) — pop_size","title":"Returns population size (estimated or fixed) — pop_size","text":"Returns population size assumed fixed – based pop_size argument, estimated – based probability survey specified svydesign based estimated propensity scores non-probability sample.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/pop_size.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns population size (estimated or fixed) — pop_size","text":"","code":"pop_size(object)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/pop_size.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns population size (estimated or fixed) — pop_size","text":"object object returned nonprob function.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/pop_size.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns population size (estimated or fixed) — pop_size","text":"scalar returning value population size.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/pop_size.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns population size (estimated or fixed) — pop_size","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\" )  ipw_est2 <- nonprob( selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\", control_selection = control_sel(est_method = \"gee\", gee_h_fun = 1))  ## estimated population size based on the non-calibrated IPW (MLE) pop_size(ipw_est1) #> pop_size  #>    51870   ## estimated population size based on the calibrated IPW (GEE) pop_size(ipw_est2) #> pop_size  #>    51870"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/print.nonprob_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Print method for the nonprob_summary object — print.nonprob_summary","title":"Print method for the nonprob_summary object — print.nonprob_summary","text":"Print method nonprob_summary object allows specification printed .","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/print.nonprob_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print method for the nonprob_summary object — print.nonprob_summary","text":"","code":"# S3 method for class 'nonprob_summary' print(x, resid = TRUE, pred = TRUE, digits = 4, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/print.nonprob_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print method for the nonprob_summary object — print.nonprob_summary","text":"x nonprob object resid whether distribution residuals printed (default TRUE) pred whether distribution predictions printed (default TRUE) digits number digits printed (default 4) ... parameters passed print method (currently supported)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/summary.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary statistics for model of the nonprob class — summary.nonprob","title":"Summary statistics for model of the nonprob class — summary.nonprob","text":"Summarises nonprob class object. summary depends type estimator (.e. IPW, MI, DR)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/summary.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary statistics for model of the nonprob class — summary.nonprob","text":"","code":"# S3 method for class 'nonprob' summary(object, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/summary.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary statistics for model of the nonprob class — summary.nonprob","text":"object object nonprob class ... Additional optional arguments","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/summary.nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary statistics for model of the nonprob class — summary.nonprob","text":"object nonprob_summary class containing: call call estimator type estimator control list controls ipw_weights estimated IPW weights ipw_weights_total estimated IPW total (sum) ps_scores_nonprob estimated propensity scores non-probability sample ps_scores_prob estimated propensity scores probability sample case_weights case weights output estimated means standard errors SE estimated standard errors V1 V2 confidence_interval confidence intervals nonprob_size size non-probability sample prob_size size probability sample pop_size population size pop_size_fixed whether population size treated fixed no_prob whether probability sample provided outcome model details selection selection details estimator_method estimator method selection_formula selection formula outcome_formula outcome formula vars_selection whether variable selection algorithm applied vars_outcome variables outcome models ys_rand_pred predicted values random sample (applies) ys_nons_pred predicted values non-probability sample ys_resid residuals non-probability sample","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/summary.nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary statistics for model of the nonprob class — summary.nonprob","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\" ) summary(ipw_est1) #> A nonprob_summary object #>  - call: nonprob(data = admin, selection = ~region + private + nace +  #>     size, target = ~single_shift, svydesign = jvs_svy, method_selection = \"logit\") #>  - estimator type: inverse probability weighting #>  - nonprob sample size: 9344 (18%) #>  - prob sample size: 6523 (12.6%) #>  - population size: 51870 (fixed: false) #>  - detailed information about models are stored in list element(s): \"selection\" #> ---------------------------------------------------------------- #>  - sum of IPW weights: 52898.13  #>  - distribution of IPW weights (nonprob sample): #>    - min: 1.1693; mean: 5.6612; median: 4.3334; max: 49.9504 #>  - distribution of IPW probabilities (nonprob sample): #>    - min: 0.0189; mean: 0.2894; median: 0.2525; max: 0.8552 #>  - distribution of IPW probabilities (prob sample): #>    - min: 0.0200; mean: 0.2687; median: 0.2291; max: 0.8552 #> ----------------------------------------------------------------"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/update.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","title":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","text":"update method nonprob class object allows re-estimate given model changed parameters. particular useful user like change method estimate standard errors estimated first place.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/update.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","text":"","code":"# S3 method for class 'nonprob' update(object, ..., evaluate = TRUE)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/update.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","text":"object nonprob class object ... arguments passed nonprob class object evaluate true evaluate new call else return call","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/update.nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","text":"returns nonprob object","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/update.nonprob.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","text":"Maciej Beręsewicz","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/update.nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The update method for the nonprob object with changed arguments or parameters — update.nonprob","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\", se = FALSE )  ipw_est1 #> A nonprob object #>  - estimator type: inverse probability weighting #>  - method: logit (mle) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimator: 0.6605 #>  - selected estimator: 0.7224 (se=NA, ci=(NA, NA))  update(ipw_est1, se = TRUE) #> A nonprob object #>  - estimator type: inverse probability weighting #>  - method: logit (mle) #>  - auxiliary variables source: survey #>  - vars selection: false #>  - variance estimator: analytic #>  - population size fixed: false #>  - naive (uncorrected) estimator: 0.6605 #>  - selected estimator: 0.7224 (se=0.0421, ci=(0.6399, 0.8048))"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/weights.nonprob.html","id":null,"dir":"Reference","previous_headings":"","what":"Extracts the inverse probability weights — weights.nonprob","title":"Extracts the inverse probability weights — weights.nonprob","text":"generic function weights returns inverse probability weights (present)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/weights.nonprob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extracts the inverse probability weights — weights.nonprob","text":"","code":"# S3 method for class 'nonprob' weights(object, ...)"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/weights.nonprob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extracts the inverse probability weights — weights.nonprob","text":"object nonprob class object ... arguments passed methods (currently supported)","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/weights.nonprob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extracts the inverse probability weights — weights.nonprob","text":"vector weights NULL extracted nonprob object .e. element \"ipw_weights\"","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/reference/weights.nonprob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extracts the inverse probability weights — weights.nonprob","text":"","code":"data(admin) data(jvs)  jvs_svy <- svydesign(ids = ~ 1,  weights = ~ weight, strata = ~ size + nace + region, data = jvs)  ipw_est1 <- nonprob(selection = ~ region + private + nace + size, target = ~ single_shift, svydesign = jvs_svy, data = admin, method_selection = \"logit\", se = FALSE )  summary(weights(ipw_est1)) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.169   2.673   4.333   5.661   7.178  49.950"},{"path":[]},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"nonprobsvy-022","dir":"Changelog","previous_headings":"","what":"nonprobsvy 0.2.2","title":"nonprobsvy 0.2.2","text":"new hex sticker Oliwia Awuku minor changes code, e.g. control_out(eps=1e-8) fixing bug bootstrap variance estimator method_nn method_pmm fixing bootstrap doubly robust estimators unit-tests doubly robust estimators methods informative vignette method_glm","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"nonprobsvy-021","dir":"Changelog","previous_headings":"","what":"nonprobsvy 0.2.1","title":"nonprobsvy 0.2.1","text":"CRAN release: 2025-04-22 titles corrected new S3 method extract added allows extract results nonprob object new S3 method coef added allows obtain coefficients underlying models (possible) fixed CRAN notes (unit tests IPW estimator cloglog) removed sampling package suggested package added simple plot method improvements linear algebra corrected check_balance error (closes #75) code cleaning","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"nonprobsvy-020","dir":"Changelog","previous_headings":"","what":"nonprobsvy 0.2.0","title":"nonprobsvy 0.2.0","text":"CRAN release: 2025-03-27","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"nonprobsvy 0.2.0","text":"functions pop.size, controlSel, controlOut controlInf renamed pop_size, control_sel, control_out control_inf respectively. function genSimData removed completely used anywhere package. argument maxLik_method renamed maxlik_method control_sel function. predictive_match renamed pmm_match_type align PMM (Predictive Mean Matching) estimator naming convention, related parameters start pmm_ argument method removed used argument est_method_sel renamed est_method argument h renamed gee_h_fun make readable user start_type now accepts zero mle (gee models ). bias_inf renamed vars_combine type changed logical. TRUE variables (levels) combined variable selection algorithm doubly robust approach. pi_ij – argument removed used. nonprobsvy class renamed nonprob related method adjusted change functions logit_model_nonprobsvy, probit_model_nonprobsvy cloglog_model_nonprobsvy removed favour readable method_ps function specifies propensity score model new option control_inference=control_inf(vars_combine=TRUE) allows doubly robust estimator combine variables prior estimation .e. selection=~x1+x2 y~x1+x3 following models fitted selection=~x1+x2+x3 y~x1+x2+x3. default set control_inference=control_inf(vars_combine=FALSE). Note behaviour assumed independently variable selection. argument nonprob(weights=NULL) replaced nonprob(case_weights=NULL) stress refer case weights sampling weights non-probability sample","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"features-0-2-0","dir":"Changelog","previous_headings":"","what":"Features","title":"nonprobsvy 0.2.0","text":"two additional datasets included: jvs (Job Vacancy Survey; probability sample survey) admin (Central Job Offers Database; non-probability sample survey). units auxiliary variables aligned way allows data integrated using methods implemented package. check_balance function added check balance totals variables based weighted weights non-probability probability samples. citation file added. argument na_action default na.omit weights – returns IPW weights update – allows update nonprob class object method_ps – modelling propensity score method_glm – modelling y using glm function method_nn – NN method method_pmm – PMM method method_npar – non-parametric method new print.nonprob, summary.nonprob print.nonprob_summary methods number digits can changed using print(x, digits) shown ","code":"> result_mi A nonprob object  - estimator type: mass imputation  - method: glm (gaussian)  - auxiliary variables source: survey  - vars selection: false  - variance estimator: analytic  - population size fixed: false  - naive (uncorrected) estimators:    - variable y1: 3.1817    - variable y2: 1.8087  - selected estimators:    - variable y1: 2.9498 (se=0.0420, ci=(2.8674, 3.0322))    - variable y2: 1.5760 (se=0.0326, ci=(1.5122, 1.6399)) > print(result_mi,2) A nonprob object  - estimator type: mass imputation  - method: glm (gaussian)  - auxiliary variables source: survey  - vars selection: false  - variance estimator: analytic  - population size fixed: false  - naive (uncorrected) estimators:    - variable y1: 3.18    - variable y2: 1.81  - selected estimators:    - variable y1: 2.95 (se=0.04, ci=(2.87, 3.03))    - variable y2: 1.58 (se=0.03, ci=(1.51, 1.64)) > summary(result_mi) |> print(digits=2) A nonprob_summary object  - call: nonprob(data = subset(population, flag_bd1 == 1), outcome = y1 +      y2 ~ x1 + x2, svydesign = sample_prob)  - estimator type: mass imputation  - nonprob sample size: 693011 (69.3%)  - prob sample size: 1000 (0.1%)  - population size: 1000000 (fixed: false)  - detailed information about models are stored in list element(s): \"outcome\" ----------------------------------------------------------------  - distribution of outcome residuals:    - y1: min: -4.79; mean: 0.00; median: 0.00; max: 4.54    - y2: min: -4.96; mean: -0.00; median: -0.07; max: 12.25  - distribution of outcome predictions (nonprob sample):    - y1: min: -2.72; mean: 3.18; median: 3.04; max: 16.28    - y2: min: -1.55; mean: 1.81; median: 1.58; max: 13.92  - distribution of outcome predictions (prob sample):    - y1: min: -0.46; mean: 2.95; median: 2.84; max: 10.31    - y2: min: -0.58; mean: 1.58; median: 1.39; max: 7.87 ----------------------------------------------------------------"},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"bugfixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"nonprobsvy 0.2.0","text":"basic methods functions related variance estimation, weights probability linking methods rewritten optimal readable way.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"other-0-2-0","dir":"Changelog","previous_headings":"","what":"Other","title":"nonprobsvy 0.2.0","text":"informative error messages added. documentation improved. switching completely snake_case. extensive cleaning code. unit-tests added. new dependencies: formula.tools","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"documentation-0-2-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"nonprobsvy 0.2.0","text":"annotation added argument strata supported time .","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"replication-materials-0-2-0","dir":"Changelog","previous_headings":"","what":"Replication materials","title":"nonprobsvy 0.2.0","text":"verify quality software please refer replication materials available : https://github.com/ncn-foreigners/software-tutorials","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"nonprobsvy-011","dir":"Changelog","previous_headings":"","what":"nonprobsvy 0.1.1","title":"nonprobsvy 0.1.1","text":"CRAN release: 2024-11-14","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"bugfixes-0-1-1","dir":"Changelog","previous_headings":"","what":"Bugfixes","title":"nonprobsvy 0.1.1","text":"bug Fix occurring estimation based auxiliary variable, led compression data frame vector. bug Fix related passing maxit argument controlSel function internally used nleqslv function bug Fix related storing vector model_frame predicting y_hat mass imputation glm model X based one auxiliary variable - fix provided converting data.frame object.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"features-0-1-1","dir":"Changelog","previous_headings":"","what":"Features","title":"nonprobsvy 0.1.1","text":"added information summary quality estimation basing difference estimated known total values auxiliary variables added estimation exact standard error k-nearest neighbor estimator. added breaking change controlOut function switching values predictive_match argument. now , predictive_match = 1 means \\hat{y}-\\hat{y} predictive mean matching imputation predictive_match = 2 corresponds \\hat{y}-y matching. implemented div option variable selection (documentation) doubly robust estimation. added insights nonprob output gradient, hessian jacobian derived IPW estimation mle gee methods IPW DR model executed. added estimated inclusion probabilities derivatives probability non-probability samples nonprob output IPW DR model executed. added model_frame matrix data probability sample used mass imputation nonprob MI DR model executed.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"unit-tests-0-1-1","dir":"Changelog","previous_headings":"","what":"Unit tests","title":"nonprobsvy 0.1.1","text":"added unit tests variable selection models mi estimation vector population totals available","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"nonprobsvy-010","dir":"Changelog","previous_headings":"","what":"nonprobsvy 0.1.0","title":"nonprobsvy 0.1.0","text":"CRAN release: 2024-04-04","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"features-0-1-0","dir":"Changelog","previous_headings":"","what":"Features","title":"nonprobsvy 0.1.0","text":"implemented population mean estimation using doubly robust, inverse probability weighting mass imputation methods implemented inverse probability weighting models Maximum Likelihood Estimation Generalized Estimating Equations methods logit, complementary log-log probit link functions. implemented generalized linear models, nearest neighbours predictive mean matching methods Mass Imputation implemented bias correction estimators doubly-robust approach implemented estimation methods vector population means/totals available implemented variables selection SCAD, LASSO MCP penalization equations implemented analytic bootstrap (parallel computation - doSNOW package) variance described estimators added control parameters models nobs samples size pop.size population size estimation residuals residuals inverse probability weighting model cooks.distance identifying influential observations significant impact parameter estimates hatvalues measuring leverage individual observations logLik computing log-likelihood model, AIC (Akaike Information Criterion) evaluating model based trade-goodness fit complexity, helping model selection BIC (Bayesian Information Criterion) similar purpose AIC stronger penalty model complexity confint calculating confidence intervals around parameter estimates vcov obtaining variance-covariance matrix parameter estimates deviance assessing goodness fit model","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"unit-tests-0-1-0","dir":"Changelog","previous_headings":"","what":"Unit tests","title":"nonprobsvy 0.1.0","text":"added unit tests IPW estimators.","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"github-repository-0-1-0","dir":"Changelog","previous_headings":"","what":"Github repository","title":"nonprobsvy 0.1.0","text":"added automated R-cmd check","code":""},{"path":"https://ncn-foreigners.github.io/nonprobsvy/news/index.html","id":"documentation-0-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"nonprobsvy 0.1.0","text":"added documentation nonprob function.","code":""}]
